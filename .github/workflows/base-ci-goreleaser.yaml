name: Reusable GoReleaser CI workflow

on:
  workflow_call:
    inputs:
      distribution:
        required: true
        type: string
      goos:
        required: true
        type: string
      goarch:
        required: true
        type: string
      nightly:
        required: false
        type: boolean
        default: false
        description: "Set to true to fetch latest otelcol-contrib main branch version instead of building the version in this repo"

env:
  # renovate: datasource=github-tags depName=goreleaser-pro packageName=goreleaser/goreleaser-pro
  GORELEASER_PRO_VERSION: v2.4.8

jobs:
  check-goreleaser:
    strategy:
      matrix:
        GOOS: ${{ fromJSON( inputs.goos) }}
        GOARCH: ${{ fromJSON( inputs.goarch) }}
        exclude:
          - GOOS: darwin
            GOARCH: "386"
          - GOOS: darwin
            GOARCH: s390x
          - GOOS: windows
            GOARCH: arm64
          - GOOS: darwin
            GOARCH: arm
          - GOOS: windows
            GOARCH: arm
          - GOOS: windows
            GOARCH: s390x
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: arm64,ppc64le,linux/arm/v7,s390x

      - name: Setup wixl # Required to build MSI packages for Windows
        if: ${{ matrix.GOOS == 'windows' && ( matrix.GOARCH == '386' || matrix.GOARCH == 'amd64') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y wixl

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.23'
          check-latest: true

      - name: Create artifacts directory to store build artifacts
        if: inputs.distribution == 'otelcol-contrib'
        run: mkdir -p distributions/otelcol-contrib/artifacts

      - name: "[Nightly] Get latest finished run ID from contrib repo build-and-test"
        id: get-run-id
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          run_id=$(gh run list \
            --branch main \
            --workflow build-and-test \
            --repo open-telemetry/opentelemetry-collector-contrib \
            --limit 1 \
            --status success \
            --json databaseId \
            --jq '.[0].databaseId' \
          )
          echo "Found run ID: $run_id"
          echo "run_id=$run_id" >> "$GITHUB_OUTPUT"

      - name: "[Nightly] Create sub-directory for otelcol-contrib nightly build"
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        run: mkdir -p distributions/otelcol-contrib/artifacts/otelcol-contrib_linux_amd64_v1

      - name: "[Nightly] Download built otelcol-contrib artifact from contrib repo"
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: collector-binaries-linux-amd64
          repository: open-telemetry/opentelemetry-collector-contrib
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-run-id.outputs.run_id }}

      - name: "[Nightly] Move downloaded artifact"
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        run: mv otelcontribcol_linux_amd64 distributions/otelcol-contrib/artifacts/otelcol-contrib_linux_amd64_v1/otelcol-contrib

      - name: Generate the sources for ${{ inputs.distribution }}
        if: inputs.nightly != true
        env:
          DISTRIBUTIONS: ${{ inputs.distribution }}
        run: make generate-sources

        # otelcol-contrib is built in a separate stage
      - name: Build ${{ inputs.distribution }}
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly != true
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_PRO_VERSION }}
          workdir: distributions/otelcol-contrib
          args: --snapshot --clean --timeout 2h --split --config .goreleaser-build.yaml
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          GOARM: 7 # Default is 6
          GOAMD64: v1
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Move built artifacts
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly != true
        run: mv distributions/otelcol-contrib/dist/**/* distributions/otelcol-contrib/artifacts/

      - name: Show built or downloaded content
        if: inputs.distribution == 'otelcol-contrib'
        run: ls -laR distributions/otelcol-contrib/artifacts

      - name: Run GoReleaser for ${{ inputs.distribution }}
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_PRO_VERSION }}
          workdir: distributions/${{ inputs.distribution }}
          args: --snapshot --clean --skip=sign,sbom --timeout 2h --split
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          GOARM: 7 # Default is 6
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Upload linux service packages
        if: ${{ matrix.GOOS == 'linux' && matrix.GOARCH == 'amd64' }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: linux-packages
          path: distributions/${{ inputs.distribution }}/dist/linux_amd64_v1/*
          if-no-files-found: error
