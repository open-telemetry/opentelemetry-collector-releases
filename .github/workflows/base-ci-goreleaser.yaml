name: Reusable GoReleaser CI workflow

on:
  workflow_call:
    inputs:
      distribution:
        required: true
        type: string
      goos:
        required: true
        type: string
      goarch:
        required: true
        type: string
      nightly:
        required: false
        type: boolean
        default: false
        description: "Set to true to fetch latest otelcol-contrib main branch version instead of building the version in this repo"

env:
  # renovate: datasource=github-tags depName=goreleaser-pro packageName=goreleaser/goreleaser-pro
  GORELEASER_PRO_VERSION: v2.7.0

jobs:
  check-goreleaser:
    strategy:
      matrix:
        GOOS: ${{ fromJSON( inputs.goos) }}
        GOARCH: ${{ fromJSON( inputs.goarch) }}
        exclude:
          - GOOS: darwin
            GOARCH: "386"
          - GOOS: darwin
            GOARCH: s390x
          - GOOS: windows
            GOARCH: arm64
          - GOOS: darwin
            GOARCH: arm
          - GOOS: windows
            GOARCH: arm
          - GOOS: windows
            GOARCH: s390x
          - GOOS: darwin
            GOARCH: ppc64le
          - GOOS: windows
            GOARCH: ppc64le
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.prep.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: arm64,ppc64le,linux/arm/v7,s390x

      - name: Setup wixl # Required to build MSI packages for Windows
        if: ${{ matrix.GOOS == 'windows' && ( matrix.GOARCH == '386' || matrix.GOARCH == 'amd64') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y wixl

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Setup Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: "~1.24"
          check-latest: true

      - name: Create artifacts directory to store build artifacts
        if: inputs.distribution == 'otelcol-contrib'
        run: mkdir -p distributions/otelcol-contrib/artifacts

      - name: "[Nightly] Get latest finished run ID from contrib repo build-and-test"
        id: get-run-id
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          run_id=$(gh run list \
            --branch main \
            --workflow build-and-test \
            --repo open-telemetry/opentelemetry-collector-contrib \
            --limit 1 \
            --status success \
            --json databaseId \
            --jq '.[0].databaseId' \
          )
          echo "Found run ID: $run_id"
          echo "run_id=$run_id" >> "$GITHUB_OUTPUT"

      - name: "[Nightly] Create sub-directory for otelcol-contrib nightly build"
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        run: mkdir -p distributions/otelcol-contrib/artifacts/otelcol-contrib_linux_amd64_v1

      - name: "[Nightly] Download built otelcol-contrib artifact from contrib repo"
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: collector-binaries-linux-amd64
          repository: open-telemetry/opentelemetry-collector-contrib
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-run-id.outputs.run_id }}

      - name: "[Nightly] Move downloaded artifact"
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly == true && matrix.GOARCH == 'amd64' && matrix.GOOS == 'linux'
        env:
          folder: distributions/otelcol-contrib/artifacts/otelcol-contrib-linux_linux_amd64_v1/
        run: |
          mkdir -p ${{ env.folder }}
          mv otelcontribcol_linux_amd64 ${{ env.folder }}/otelcol-contrib

      - name: Generate the sources for ${{ inputs.distribution }}
        if: inputs.nightly != true
        env:
          DISTRIBUTIONS: ${{ inputs.distribution }}
        run: make generate-sources

        # otelcol-contrib is built in a separate stage
      - name: Build ${{ inputs.distribution }}
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly != true
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_PRO_VERSION }}
          workdir: distributions/otelcol-contrib
          args: --snapshot --clean --timeout 2h --split --config .goreleaser-build.yaml
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          GOARM: "7" # Default is 6
          GOAMD64: v1
          GOPPC64: power8
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Move built artifacts
        if: inputs.distribution == 'otelcol-contrib' && inputs.nightly != true
        run: mv distributions/otelcol-contrib/dist/**/* distributions/otelcol-contrib/artifacts/

      - name: Show built or downloaded content
        if: inputs.distribution == 'otelcol-contrib'
        run: ls -laR distributions/otelcol-contrib/artifacts

      - name: Run GoReleaser for ${{ inputs.distribution }}
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_PRO_VERSION }}
          workdir: distributions/${{ inputs.distribution }}
          args: --snapshot --clean --skip=sign,sbom --timeout 2h --split
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          GOARM: "7" # Default is 6
          GOAMD64: v1
          GOPPC64: power8
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Print built artifacts
        run: cat ./distributions/${{ inputs.distribution }}/dist/**/artifacts.json

      - name: Print metadata
        run: cat ./distributions/${{ inputs.distribution }}/dist/**/metadata.json

      - name: Print dist folder contents
        if: always()
        run: ls -laR ./distributions/${{ inputs.distribution }}/dist

      - name: Upload linux service packages
        if: ${{ matrix.GOOS == 'linux' && matrix.GOARCH == 'amd64' && (inputs.distribution == 'otelcol-contrib' || inputs.distribution == 'otelcol') }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: linux-packages
          path: distributions/${{ inputs.distribution }}/dist/linux_amd64_v1/*
          if-no-files-found: error

      - name: Upload MSI packages
        if: matrix.GOOS == 'windows' && matrix.GOARCH == 'amd64' && (inputs.distribution == 'otelcol-contrib' || inputs.distribution == 'otelcol')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: msi-packages
          path: distributions/${{ inputs.distribution }}/dist/windows_amd64_v1/**/*.msi
          if-no-files-found: error

      - name: Prepare variables
        if: matrix.GOOS == 'linux'
        id: prep
        run: |
          # Find version number and types of built artifacts
          echo "version=$(cat ./distributions/${{ inputs.distribution }}/dist/**/metadata.json | jq -r '.version')" >> "$GITHUB_OUTPUT"
          echo "types=$(cat ./distributions/${{ inputs.distribution }}/dist/**/artifacts.json | jq '[.[].type]' | tr -d '\n' )" >> "$GITHUB_OUTPUT"
          
          # Find GOOS and GOARCH
          os=$(cat ./distributions/${{ inputs.distribution }}/dist/**/artifacts.json | jq -r '.[] | select(.name | contains(".tar.gz")) | .goos')
          arch=$(cat ./distributions/${{ inputs.distribution }}/dist/**/artifacts.json | jq -r '.[] | select(.name | contains(".tar.gz")) | .goarch')
          echo "arch=$os-$arch" >> "$GITHUB_OUTPUT"
          
          # Find binary path
          echo "binary-path=$(cat ./distributions/${{ inputs.distribution }}/dist/**/artifacts.json | jq -r 'map(select(any(.type; contains("Binary")))) | .[].path' )" >> "$GITHUB_OUTPUT"

      - name: Print version and target
        if: matrix.GOOS == 'linux'
        run: |
          echo 'Version: ${{ steps.prep.outputs.version }}'
          echo 'Types: ${{ steps.prep.outputs.types }}'
          echo 'Arch: ${{ steps.prep.outputs.arch }}'
          echo 'Images?: ${{ steps.prep.outputs.container-images }}'

      - name: Copy binary to distro root folder
        if: matrix.GOOS == 'linux'
        run: cp ./distributions/${{ inputs.distribution }}/${{ steps.prep.outputs.binary-path }} ./distributions/${{ inputs.distribution }}

      - name: Build container images locally
        if: matrix.GOOS == 'linux' && contains(steps.prep.outputs.types, 'Docker Image')
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: ./distributions/${{ inputs.distribution }}
          push: false
          load: true
          tags: ${{ inputs.distribution }}:${{ steps.prep.outputs.version }}-${{ steps.prep.outputs.arch }}

      - name: Export container image to tarball
        if: matrix.GOOS == 'linux' && contains(steps.prep.outputs.types, 'Docker Image')
        run: |
          docker save ${{ inputs.distribution }}:${{ steps.prep.outputs.version }}-${{ steps.prep.outputs.arch }} > /tmp/${{ inputs.distribution }}.tar

      - name: Upload container image artifact
        if: matrix.GOOS == 'linux' && contains(steps.prep.outputs.types, 'Docker Image')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ inputs.distribution }}-image-${{ steps.prep.outputs.version }}-${{ steps.prep.outputs.arch }}
          path: /tmp/${{ inputs.distribution }}.tar
          retention-days: 7

  docker-tests:
    needs:
      - check-goreleaser
    strategy:
      matrix:
        GOOS: ${{ fromJSON( inputs.goos) }}
        GOARCH: ${{ fromJSON( inputs.goarch) }}
        exclude:
          - GOOS: darwin
          - GOOS: windows
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: arm64,ppc64le,linux/arm/v7,s390x

      - name: Download container image artifact
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: ${{ inputs.distribution }}-image-${{ needs.check-goreleaser.outputs.version }}-${{ matrix.GOOS }}-${{ matrix.GOARCH }}

      - name: Load image into docker
        run: |
          docker image load --input ./${{ inputs.distribution }}.tar
          docker image ls
          docker image inspect ${{ inputs.distribution }}:${{ needs.check-goreleaser.outputs.version }}-${{ matrix.GOOS }}-${{ matrix.GOARCH }}

      - name: Run container image
        run: |
          echo "Running container..."
          docker run --name ${{ inputs.distribution }} \
            -d \
            -v ${PWD}/tests/docker-tests/default-config.yaml:/config.yaml \
            ${{ inputs.distribution }}:${{ needs.check-goreleaser.outputs.version }}-${{ matrix.GOOS }}-${{ matrix.GOARCH }} \
            --config /config.yaml
          echo "docker ps:"
          echo ""
          docker ps
          echo "Sleeping for a bit..."
          sleep 10
          echo "Checking logs for correct startup..."
          docker logs ${{ inputs.distribution }} >& docker-logs-${{ inputs.distribution }}.log
          if cat docker-logs-${{ inputs.distribution }}.log | grep "Everything is ready."; then
            echo "${{ inputs.distribution }} started up correctly"
          else
            echo "${{ inputs.distribution }} failed to start"
            echo "Printing container logs below..."
            echo ""
            cat docker-logs-${{ inputs.distribution }}.log
            exit 1
          fi
